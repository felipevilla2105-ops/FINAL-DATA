import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt
import seaborn as sns       
import plotly.express as px
import streamlit as st
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os

load_dotenv()

url="https://github.com/felipevilla2105-ops/curso-talento-t/raw/refs/heads/main/carga_ficticia_111.csv"
#leer el df separador ;     
df=pd.read_csv(url,sep=';')


# --- Configuraci√≥n de la p√°gina de Streamlit ---
st.set_page_config(layout="wide", page_title="An√°lisis de Procesos Judiciales")

st.image('IMG\IMAGEN .jpg', use_container_width=True)


# Nombre del archivo cargado (debe estar en el mismo directorio o se debe proporcionar la ruta completa)
# *Aseg√∫rate de que este nombre coincida con tu archivo cargado*
FILE_PATH = 'https://github.com/felipevilla2105-ops/curso-talento-t/raw/refs/heads/main/carga_ficticia_111.csv' 

try:
    # Cargar el archivo CSV
    df = pd.read_csv(FILE_PATH)

    # Convertir columnas de fechas a datetime
    # Se utiliza 'errors="coerce"' para manejar posibles valores no v√°lidos, convirti√©ndolos a NaT (Not a Time)
    df['Fecha de los Hechos'] = pd.to_datetime(df['Fecha de los Hechos'], errors='coerce')
    df['Fecha de la denuncia'] = pd.to_datetime(df['Fecha de la denuncia'], errors='coerce')
    df['Fecha √öltima Actuaci√≥n'] = pd.to_datetime(df['Fecha √öltima Actuaci√≥n'], errors='coerce')

    # Fecha actual para comparaci√≥n
    fecha_actual = datetime.now()

    # ======================================================================
    # 1. CADUCIDAD DE LA QUERELLA
    # ======================================================================
    st.header("1. CADUCIDAD DE LA QUERELLA")
    st.markdown("---")

    # Filtrar solo los casos 'QUERELLABLE' (se usa .str.upper() y .str.strip() para robustez)
    df_querellable = df[df['Tipo de Noticia'].str.upper().str.strip() == 'QUERELLA'].copy()

    # Calcular la diferencia en d√≠as entre la fecha de la denuncia y la fecha de los hechos
    df_querellable['Diferencia_Dias'] = (df_querellable['Fecha de la denuncia'] - df_querellable['Fecha de los Hechos']).dt.days

    # Aplicar la l√≥gica de caducidad (m√°s de 180 d√≠as es aproximadamente 6 meses)
    def check_caducidad(row):
        # La querella debe presentarse DENTRO de los 6 meses (180 d√≠as) desde los hechos.
        # Si la diferencia es > 180 (m√°s de 6 meses), hay caducidad.
        if pd.notna(row['Diferencia_Dias']) and row['Diferencia_Dias'] > 180:
            return "‚ùå Caducidad de la querella"
        elif pd.notna(row['Diferencia_Dias']):
            return "‚úÖ Querella vigente"
        return "‚ö†Ô∏è Datos de fecha incompletos"

    df_querellable['An√°lisis Caducidad'] = df_querellable.apply(check_caducidad, axis=1)

    # Mostrar resultados en Streamlit
    if not df_querellable.empty:
        df_caducidad_display = df_querellable[
             (df_querellable['An√°lisis Caducidad'] == "‚ùå Caducidad de la querella") |
             (df_querellable['An√°lisis Caducidad'] == "‚ö†Ô∏è Datos de fecha incompletos")
        ]
        
        if not df_caducidad_display.empty:
            st.subheader("Casos con posible Caducidad:")
            st.dataframe(
                df_caducidad_display[['Caso Noticia', 'Tipo de Noticia', 'Fecha de los Hechos', 'Fecha de la denuncia', 'Diferencia_Dias', 'An√°lisis Caducidad']]
            )
        else:
            st.info("No hay casos querellables que presenten caducidad o fechas incompletas.")
    else:
        st.info("No se encontraron casos con 'Tipo de Noticia' = 'QUERELLA'.")

    # ---
    
    # ======================================================================
    # 2. √öLTIMAS ACTUACIONES (Inactividad General)
    # ======================================================================
    st.header("2. √öLTIMAS ACTUACIONES")
    st.markdown("---")

    # Definir el umbral de inactividad (2 meses = 60 d√≠as)
    umbral_inactividad_dias = 60
    fecha_limite = fecha_actual - timedelta(days=umbral_inactividad_dias)

    # Casos cuya √∫ltima actuaci√≥n es anterior a la fecha l√≠mite de 2 meses
    df['An√°lisis Inactividad'] = df.apply(
        lambda row: "üö® Avanzar con el proceso"
        if pd.notna(row['Fecha √öltima Actuaci√≥n']) and row['Fecha √öltima Actuaci√≥n'] < fecha_limite
        else "üü¢ Actividad reciente",
        axis=1
    )

    # Filtrar solo los casos que cumplen la condici√≥n de inactividad
    df_avanzar = df[df['An√°lisis Inactividad'] == "üö® Avanzar con el proceso"].copy()

    # Mostrar resultados
    if not df_avanzar.empty:
        st.subheader(f"Procesos con Inactividad de m√°s de {umbral_inactividad_dias} d√≠as (2 meses):")
        st.dataframe(
            df_avanzar[['Caso Noticia', 'Fecha √öltima Actuaci√≥n', '√öltima Actuaci√≥n', 'An√°lisis Inactividad']]
        )
    else:
        st.info("Todos los procesos tienen una 'Fecha √öltima Actuaci√≥n' en los √∫ltimos 2 meses o la fecha est√° incompleta.")

    # ---

    # ======================================================================
    # 3. CONCILIACI√ìN FRACASADA / CON ACUERDO
    # ======================================================================
    st.header("3. CONCILIACI√ìN: Estado del Proceso")
    st.markdown("---")

    # Convertir a may√∫sculas y limpiar espacios para asegurar la coincidencia
    df['√öltima Actuaci√≥n Limpia'] = df['√öltima Actuaci√≥n'].astype(str).str.upper().str.strip().fillna('')

    # Aplicar la l√≥gica de conciliaci√≥n
    def check_conciliacion(actuacion):
        if 'CONCILIACI√ìN FRACASADA' in actuacion:
            return "‚û°Ô∏è Continuar con el proceso (Conciliaci√≥n Fracasada)"
        elif 'CONCILIACI√ìN CON ACUERDO' in actuacion:
            return "üíæ Proceder con el archivo (Conciliaci√≥n con Acuerdo)"
        return "No aplica o estado diferente"

    df['An√°lisis Conciliaci√≥n'] = df['√öltima Actuaci√≥n Limpia'].apply(check_conciliacion)

    # Filtrar solo los casos relevantes
    df_conciliacion = df[
        (df['An√°lisis Conciliaci√≥n'] == "‚û°Ô∏è Continuar con el proceso (Conciliaci√≥n Fracasada)") |
        (df['An√°lisis Conciliaci√≥n'] == "üíæ Proceder con el archivo (Conciliaci√≥n con Acuerdo)")
    ].copy()

    # Mostrar resultados
    if not df_conciliacion.empty:
        st.subheader("Resultados Espec√≠ficos de Conciliaci√≥n:")
        st.dataframe(
            df_conciliacion[['Caso Noticia', '√öltima Actuaci√≥n', 'An√°lisis Conciliaci√≥n']]
        )
    else:
        st.info("No se encontraron casos con 'Conciliaci√≥n Fracasada' o 'Conciliaci√≥n con Acuerdo'.")

    # ---

    # ======================================================================
    # 4. INACTIVIDAD DEL DENUNCIANTE
    # ======================================================================
    st.header("4. INACTIVIDAD DEL DENUNCIANTE")
    st.markdown("---")

    # Definir la actuaci√≥n espec√≠fica
    actuacion_buscada = 'SOLICITUD A DENUNCIANTE DE INFORMACI√ìN ADICIONAL' # Usamos una parte de la cadena para ser flexibles
    umbral_denunciante_dias = 60 # 2 meses

    # Filtrar casos con la actuaci√≥n espec√≠fica
    df_denunciante = df[df['√öltima Actuaci√≥n Limpia'].str.contains(actuacion_buscada.upper(), na=False)].copy()

    # Calcular la diferencia en d√≠as desde la √∫ltima actuaci√≥n
    df_denunciante['D√≠as_Desde_Actuacion'] = (fecha_actual - df_denunciante['Fecha √öltima Actuaci√≥n']).dt.days

    # Aplicar la l√≥gica de inactividad del denunciante
    def check_inactividad_denunciante(row):
        if pd.notna(row['D√≠as_Desde_Actuacion']) and row['D√≠as_Desde_Actuacion'] > umbral_denunciante_dias:
            return "üìÇ Se puede proceder con el archivo del caso (Inactividad del denunciante)"
        elif pd.notna(row['D√≠as_Desde_Actuacion']):
            return f"Pendiente (Han pasado {int(row['D√≠as_Desde_Actuacion'])} d√≠as)"
        return "‚ö†Ô∏è Fecha de actuaci√≥n incompleta"

    df_denunciante['An√°lisis Inactividad Denunciante'] = df_denunciante.apply(check_inactividad_denunciante, axis=1)

    # Filtrar solo los casos listos para archivo o pendientes
    df_archivo_denunciante = df_denunciante[
        df_denunciante['An√°lisis Inactividad Denunciante'].str.contains("proceder con el archivo") |
        df_denunciante['An√°lisis Inactividad Denunciante'].str.contains("Pendiente")
    ].copy()

    # Mostrar resultados
    if not df_archivo_denunciante.empty:
        st.subheader(f"Casos con '{actuacion_buscada}' para seguimiento:")
        st.dataframe(
            df_archivo_denunciante[['Caso Noticia', 'Fecha √öltima Actuaci√≥n', '√öltima Actuaci√≥n', 'D√≠as_Desde_Actuacion', 'An√°lisis Inactividad Denunciante']]
        )
    else:
        st.info(f"No hay casos con la actuaci√≥n '{actuacion_buscada}' o los datos est√°n incompletos.")


except FileNotFoundError:
    st.error(f"¬°Error! El archivo '{FILE_PATH}' no se encontr√≥. Aseg√∫rate de que est√° en el mismo directorio.")
except Exception as e:
    st.error(f"Ocurri√≥ un error al procesar el archivo: {e}")